// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Question {
  id                   String                 @id @default(cuid())
  title                String?
  body                 String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               String
  explanation          String                 @default("Pergunte ao seu professor")
  correctAnswer        Boolean?
  typeId               String
  type                 QuestionType           @relation(fields: [typeId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
  questionOptions      QuestionOption[]
  FibonacciQuestionLog FibonacciQuestionLog[]
}

model QuestionType {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name                 QuestionTypeName?
  questions            Question[]
  fibonacciQuestionLog FibonacciQuestionLog[]
}

model Option {
  id              String           @id @default(cuid())
  title           String
  isCorrect       Boolean
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  questionOptions QuestionOption[]
}

model QuestionOption {
  id         String   @id @default(cuid())
  questionId String
  optionId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  option     Option   @relation(fields: [optionId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@unique([questionId, optionId])
}

enum QuestionTypeName {
  TRUE_FALSE
  FLASH_CARD
  MULTIPLE_CHOICE
  SHORT_ANSWER
  MATCHING
  ESSAY
  SUMMARY
  ACTION_ITEM
  FILL_IN_THE_BLANK
  MULTIPLE_RESPONSE
  ORDERING
  DRAG_AND_DROP
}

model User {
  id                   String                 @id @default(cuid())
  email                String?                @unique
  password             String?
  questions            Question[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  fibonacciQuestionLog FibonacciQuestionLog[]
}

model FibonacciQuestionLog {
  id               String        @id @default(cuid())
  questionId       String
  userId           String
  questionTypeId   String
  fibonacciIndex   Int
  nextRevisionDate DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  question         Question      @relation(fields: [questionId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  QuestionType     QuestionType @relation(fields: [questionTypeId], references: [id])

  @@unique([questionId, userId, fibonacciIndex])
}
